name: Docker Hub Push & 개발 서버 EC2 배포

on:
  push:
    branches:
      - develop
  workflow_dispatch: # 수동 실행 이벤트 추가

jobs:
  build:
    name: 빌드 작업
    runs-on: ubuntu-latest

    env:
      ENV_CONTENT: ${{ secrets.ENV_CONTENT }}
      DOCKER_ID: ${{ secrets.DOCKER_ID }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      DOCKER_IMAGE_NAME: ${{ secrets.DOCKER_IMAGE_NAME }}

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: .env 등록
        run: |
          echo "${{ env.ENV_CONTENT }}" > .env

      - name: Docker Hub에 로그인
        run: echo "${{ env.DOCKER_PASSWORD }}" | docker login -u "${{ env.DOCKER_ID }}" --password-stdin

      - name: Docker 이미지 빌드 및 푸시
        run: |
          docker build -t ${{ env.DOCKER_ID }}/${{ env.DOCKER_IMAGE_NAME }} .
          docker push ${{ env.DOCKER_ID }}/${{ env.DOCKER_IMAGE_NAME }}

  deploy:
    name: 개발 서버 EC2 배포
    needs: build
    runs-on: ubuntu-latest

    env:
      EC2_HOST: ${{ secrets.EC2_HOST }}
      EC2_USER: ${{ secrets.EC2_USER }}
      EC2_KEY: ${{ secrets.EC2_KEY }}

      # Docker 관련
      CONTAINER_NAME: q-asker-ai-server
      DOCKER_ID: ${{ secrets.DOCKER_ID }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      DOCKER_IMAGE_NAME: ${{ secrets.DOCKER_IMAGE_NAME }}

    steps:
      - name: EC2에 배포
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ env.EC2_KEY }}
          debug: true
          script: |
            echo "${{ env.DOCKER_PASSWORD }}" | docker login -u "${{ env.DOCKER_ID }}" --password-stdin
            docker pull ${{ env.DOCKER_ID }}/${{ env.DOCKER_IMAGE_NAME }}
            docker stop ${{ env.CONTAINER_NAME }} || true
            docker rm ${{ env.CONTAINER_NAME }} || true
            docker run -d --name ${{ env.CONTAINER_NAME }} -p 8000:8000 ${{ env.DOCKER_ID }}/${{ env.DOCKER_IMAGE_NAME }}
            docker image prune -af